{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "mypl",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#types"
		},
		{
			"match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*",
			"name": "constant.numeric"
		},
		{
			"begin": "(?x)\n(?!(?:while|for|if|elseif|else|return)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.c"
				},
				"2": {
					"name": "punctuation.section.arguments.begin.bracket.round.c"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.arguments.end.bracket.round.c"
				}
			},
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.mypl",
				"match": "\\b(if|elseif|else|while|for|return|new|struct|function|delete)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.mypl",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.mypl",
					"match": "\\\\."
				}
			]
		},
		"types": {
			"patterns": [
				{
					"match": "(?-mix:(?<!\\w)(?:void|bool|int|string|array|true|false|null|double)(?!\\w))",
					"name": "storage.type.built-in.primitive.c"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"match": "//.*$",
					"name": "comment.line.mylanguage"
				}
			]
		},
		"function-call-innards": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#types"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#strings"
				},
				{
					"begin": "(?x)\n(?!(?:while|for|if|elseif|else|return)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.c"
						},
						"2": {
							"name": "punctuation.section.arguments.begin.bracket.round.c"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.arguments.end.bracket.round.c"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.c"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.c"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				}
			]
		}
	},
	"scopeName": "source.mypl"
}